{"version":3,"sources":["PageCharacters/hooks/characters-hook.js","PageCharacters/components/CenterContainer.js","PageCharacters/components/CharactersGrid/Characters/CharacterCard.js","PageCharacters/components/CharactersGrid/Characters/Characters.js","PageCharacters/components/CharactersGrid/CharactersGrid.js","PageCharacters/components/HeaderGrid.js","PageCharacters/PageCharacters.js","App.js","index.js"],"names":["GET_ALL_CHARACTERS","gql","CenterContainer","props","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","children","useStyles","makeStyles","theme","root","padding","textAlign","color","palette","text","secondary","media","height","CharacterCard","classes","Card","className","CardActionArea","CardMedia","image","title","name","CardContent","Typography","gutterBottom","variant","component","CardActions","Button","size","Characters","characters","map","character","index","flexGrow","CharactersGrid","isLoading","CircularProgress","hasError","charactersChunks","_","chunk","defaultProps","HeaderGrid","Input","onChange","value","filterName","placeholder","PageCharacters","useState","setFilterName","setCharacters","useLazyQuery","variables","filter","loadCharacters","loading","called","data","error","useEffect","results","length","useCharacters","e","target","App","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.bc5b2e7e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport {\n  useQuery,\n  gql,\n  useLazyQuery,\n} from '@apollo/client';\n\nconst GET_ALL_CHARACTERS = gql`\nquery AllCharacters($page: Int, $filter: FilterCharacter) {\n  characters(page: $page, filter: $filter) {\n    results {\n      id\n      name\n      status\n      species\n      type\n      gender\n      image\n      created\n    }\n  }\n}\n`;\nexport function useCharacters() {\n  const [filterName, setFilterName] = useState('');\n  const [characters, setCharacters] = useState([]);\n\n  const [\n    loadCharacters,\n    {\n      called, loading, data, error,\n    },\n  ] = useLazyQuery(GET_ALL_CHARACTERS, {\n    variables: { filter: { name: filterName } },\n  });\n\n  useEffect(() => {\n    loadCharacters();\n  }, [filterName]);\n\n  useEffect(() => {\n    if (data && data.characters && data.characters.results.length > 0) {\n      const characters = data.characters.results;\n      setCharacters(characters);\n    }\n  }, [data]);\n\n  const hasError = !!error;\n\n  return {\n    characters, filterName, setFilterName, isLoading: loading, hasError,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\n\nexport function CenterContainer(props) {\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: '100vh' }}\n    >\n\n      <Grid item xs={3}>\n        {props.children}\n      </Grid>\n\n    </Grid>\n  );\n}\n\nCenterContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  media: {\n    height: 240,\n  },\n}));\n\nexport function CharacterCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={props.image}\n          title={props.name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n            across all continents except Antarctica\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nCharacterCard.propTypes = {\n  image: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport { CharacterCard } from './CharacterCard';\n\nexport function Characters(props) {\n  return props.characters.map((character, index) => (\n    <Grid item xs={4} key={index}>\n      <CharacterCard name={character.name} image={character.image} />\n    </Grid>\n  ));\n}\n\nCharacters.propTypes = {\n  characters: PropTypes.shape(PropTypes.string).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport _ from 'lodash';\n\nimport { CenterContainer } from '../CenterContainer';\nimport { Characters } from './Characters';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nexport function CharactersGrid(props) {\n  const classes = useStyles();\n\n  if (props.isLoading) return <CenterContainer><CircularProgress /></CenterContainer>;\n  if (props.hasError) return <CenterContainer>Not Found...</CenterContainer>;\n\n  const charactersChunks = _.chunk(props.characters, 3);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <>\n          {\n            charactersChunks.map((characters) => (\n              <Grid container item xs={12} spacing={3}>\n                <Characters characters={characters} />\n              </Grid>\n            ))\n          }\n        </>\n      </Grid>\n    </div>\n  );\n}\n\nCharactersGrid.propTypes = {\n  characters: PropTypes.shape(PropTypes.string).isRequired,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n};\n\nCharactersGrid.defaultProps = {\n  isLoading: false,\n  hasError: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\n\nimport { Input } from '@material-ui/core';\n\nexport function HeaderGrid(props) {\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n    >\n      <Grid item xs={3}>\n        <Input\n          onChange={props.onChange}\n          value={props.filterName}\n          placeholder=\"search characters...\"\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nHeaderGrid.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filterName: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport { useCharacters } from './hooks/characters-hook';\nimport { CharactersGrid } from './components/CharactersGrid';\nimport { HeaderGrid } from './components/HeaderGrid';\n\nexport function PageCharacters(props) {\n  const {\n    characters, filterName, setFilterName, isLoading, hasError,\n  } = useCharacters();\n\n  function handleFilterNameChange(e) {\n    const { value } = e.target;\n    setFilterName(value);\n  }\n\n  return (\n    <div>\n      <HeaderGrid\n        onChange={handleFilterNameChange}\n        filterName={filterName}\n      />\n      <CharactersGrid\n        characters={characters}\n        isLoading={isLoading}\n        hasError={hasError}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport { PageCharacters } from './PageCharacters';\n\nfunction App() {\n  return (\n    <div>\n      <PageCharacters filterName=\"filterName\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from '@apollo/client';\nimport App from './App';\n\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}